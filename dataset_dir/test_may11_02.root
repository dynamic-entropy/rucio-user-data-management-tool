File22

       -n, --number
      sdfhkjsdfksdfksdkfsdkfl ^I
sadasdasdadas
       -u     (ignored)
kfjhsdkfhsdkhfk
       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       cat    Copy standard input to standard output.

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report cat translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright Â© 2018 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       tac(1)

       Full documentation at: <https://www.gnu.org/software/coreutils/cat>
       or available locally via: info '(coreutils) cat invocation'

GNU coreutils 8.30                                                                                   September 2019                                                                                               CAT(1)
LESS(1)                                                                                          General Commands Manual                                                                                         LESS(1)

NAME
       less - opposite of more

SYNOPSIS
       less -?
       less --help
       less -V
       less --version
       less [-[+]aABcCdeEfFgGiIJKLmMnNqQrRsSuUVwWX~]
            [-b space] [-h lines] [-j line] [-k keyfile]
            [-{oO} logfile] [-p pattern] [-P prompt] [-t tag]
            [-T tagsfile] [-x tab,...] [-y lines] [-[z] lines]
            [-# shift] [+[+]cmd] [--] [filename]...
       (See the OPTIONS section for alternate option syntax with long option names.)

DESCRIPTION
       Less  is a program similar to more (1), but it has many more features.  Less does not have to read the entire input file before starting, so with large input files it starts up faster than text editors like vi
       (1).  Less uses termcap (or terminfo on some systems), so it can run on a variety of terminals.  There is even limited support for hardcopy terminals.  (On a hardcopy terminal, lines which should be printed at
       the top of the screen are prefixed with a caret.)

       Commands are based on both more and vi.  Commands may be preceded by a decimal number, called N in the descriptions below.  The number is used by some commands, as indicated.

COMMANDS
       In the following descriptions, ^X means control-X.  ESC stands for the ESCAPE key; for example ESC-v means the two character sequence "ESCAPE", then "v".

       h or H Help: display a summary of these commands.  If you forget all the other commands, remember this one.

       SPACE or ^V or f or ^F
              Scroll  forward  N  lines,  default one window (see option -z below).  If N is more than the screen size, only the final screenful is displayed.  Warning: some systems use ^V as a special literalization
              character.

       z      Like SPACE, but if N is specified, it becomes the new window size.

       ESC-SPACE
              Like SPACE, but scrolls a full screenful, even if it reaches end-of-file in the process.

       ENTER or RETURN or ^N or e or ^E or j or ^J
              Scroll forward N lines, default 1.  The entire N lines are displayed, even if N is more than the screen size.

       d or ^D
              Scroll forward N lines, default one half of the screen size.  If N is specified, it becomes the new default for subsequent d and u commands.

       b or ^B or ESC-v
              Scroll backward N lines, default one window (see option -z below).  If N is more than the screen size, only the final screenful is displayed.

       w      Like ESC-v, but if N is specified, it becomes the new window size.

       y or ^Y or ^P or k or ^K
              Scroll backward N lines, default 1.  The entire N lines are displayed, even if N is more than the screen size.  Warning: some systems use ^Y as a special job control character.

       u or ^U
              Scroll backward N lines, default one half of the screen size.  If N is specified, it becomes the new default for subsequent d and u commands.

       J      Like j, but continues to scroll beyond the end of the file.

       K or Y Like k, but continues to scroll beyond the beginning of the file.

       ESC-) or RIGHTARROW
              Scroll horizontally right N characters, default half the screen width (see the -# option).  If a number N is specified, it becomes the default for future RIGHTARROW and LEFTARROW  commands.   While  the
              text is scrolled, it acts as though the -S option (chop lines) were in effect.

       ESC-( or LEFTARROW
              Scroll horizontally left N characters, default half the screen width (see the -# option).  If a number N is specified, it becomes the default for future RIGHTARROW and LEFTARROW commands.

       ESC-} or ^RIGHTARROW
              Scroll horizontally right to show the end of the longest displayed line.

       ESC-{ or ^LEFTARROW
              Scroll horizontally left back to the first column.

       r or ^R or ^L
              Repaint the screen.

       R      Repaint the screen, discarding any buffered input.  Useful if the file is changing while it is being viewed.

       F      Scroll  forward,  and  keep  trying to read when the end of file is reached.  Normally this command would be used when already at the end of the file.  It is a way to monitor the tail of a file which is
              growing while it is being viewed.  (The behavior is similar to the "tail -f" command.)

       ESC-F  Like F, but as soon as a line is found which matches the last search pattern, the terminal bell is rung and forward scrolling stops.

       g or < or ESC-<
              Go to line N in the file, default 1 (beginning of file).  (Warning: this may be slow if N is large.)

       G or > or ESC->
              Go to line N in the file, default the end of the file.  (Warning: this may be slow if N is large, or if N is not specified and standard input, rather than a file, is being read.)

       ESC-G  Same as G, except if no number N is specified and the input is standard input, goes to the last line which is currently buffered.

       p or % Go to a position N percent into the file.  N should be between 0 and 100, and may contain a decimal point.

       P      Go to the line containing byte offset N in the file.

       {      If a left curly bracket appears in the top line displayed on the screen, the { command will go to the matching right curly bracket.  The matching right curly bracket is positioned on the bottom line  of
              the screen.  If there is more than one left curly bracket on the top line, a number N may be used to specify the N-th bracket on the line.

       }      If  a  right curly bracket appears in the bottom line displayed on the screen, the } command will go to the matching left curly bracket.  The matching left curly bracket is positioned on the top line of
              the screen.  If there is more than one right curly bracket on the top line, a number N may be used to specify the N-th bracket on the line.

       (      Like {, but applies to parentheses rather than curly brackets.

       )      Like }, but applies to parentheses rather than curly brackets.

       [      Like {, but applies to square brackets rather than curly brackets.

       ]      Like }, but applies to square brackets rather than curly brackets.

       ESC-^F Followed by two characters, acts like {, but uses the two characters as open and close brackets, respectively.  For example, "ESC ^F < >" could be used to go forward to the > which matches the < in  the
              top displayed line.

       ESC-^B Followed by two characters, acts like }, but uses the two characters as open and close brackets, respectively.  For example, "ESC ^B < >" could be used to go backward to the < which matches the > in the
              bottom displayed line.

       m      Followed by any lowercase or uppercase letter, marks the first displayed line with that letter.  If the status column is enabled via the -J option, the status column shows the marked line.

       M      Acts like m, except the last displayed line is marked rather than the first displayed line.

       '      (Single quote.)  Followed by any lowercase or uppercase letter, returns to the position which was previously marked with that letter.  Followed by another single quote, returns to the position at  which
              the  last  "large" movement command was executed.  Followed by a ^ or $, jumps to the beginning or end of the file respectively.  Marks are preserved when a new file is examined, so the ' command can be
              used to switch between input files.

       ^X^X   Same as single quote.

       ESC-m  Followed by any lowercase or uppercase letter, clears the mark identified by that letter.

       /pattern
              Search forward in the file for the N-th line containing the pattern.  N defaults to 1.  The pattern is a regular expression, as recognized by the regular expression library supplied by your system.  The
              search starts at the first line displayed (but see the -a and -j options, which change this).

              Certain characters are special if entered at the beginning of the pattern; they modify the type of search rather than become part of the pattern:

              ^N or !
                     Search for lines which do NOT match the pattern.

              ^E or *
                     Search multiple files.  That is, if the search reaches the END of the current file without finding a match, the search continues in the next file in the command line list.

              ^F or @
                     Begin the search at the first line of the FIRST file in the command line list, regardless of what is currently displayed on the screen or the settings of the -a or -j options.

              ^K     Highlight any text which matches the pattern on the current screen, but don't move to the first match (KEEP current position).

              ^R     Don't interpret regular expression metacharacters; that is, do a simple textual comparison.

       ?pattern
              Search backward in the file for the N-th line containing the pattern.  The search starts at the last line displayed (but see the -a and -j options, which change this).

              Certain characters are special as in the / command:

              ^N or !
                     Search for lines which do NOT match the pattern.

              ^E or *
                     Search multiple files.  That is, if the search reaches the beginning of the current file without finding a match, the search continues in the previous file in the command line list.

              ^F or @
                     Begin the search at the last line of the last file in the command line list, regardless of what is currently displayed on the screen or the settings of the -a or -j options.

              ^K     As in forward searches.

              ^R     As in forward searches.

       ESC-/pattern
              Same as "/*".

       ESC-?pattern
              Same as "?*".

       n      Repeat  previous  search,  for N-th line containing the last pattern.  If the previous search was modified by ^N, the search is made for the N-th line NOT containing the pattern.  If the previous search
              was modified by ^E, the search continues in the next (or previous) file if not satisfied in the current file.  If the previous search was modified by ^R, the search is done without using regular expresâ
              sions.  There is no effect if the previous search was modified by ^F or ^K.

       N      Repeat previous search, but in the reverse direction.

       ESC-n  Repeat previous search, but crossing file boundaries.  The effect is as if the previous search were modified by *.

       ESC-N  Repeat previous search, but in the reverse direction and crossing file boundaries.

       ESC-u  Undo  search  highlighting.   Turn  off  highlighting of strings matching the current search pattern.  If highlighting is already off because of a previous ESC-u command, turn highlighting back on.  Any
              search command will also turn highlighting back on.  (Highlighting can also be disabled by toggling the -G option; in that case search commands do not turn highlighting back on.)

       &pattern
              Display only lines which match the pattern; lines which do not match the pattern are not displayed.  If pattern is empty (if you type & immediately followed by ENTER), any filtering is turned  off,  and
              all lines are displayed.  While filtering is in effect, an ampersand is displayed at the beginning of the prompt, as a reminder that some lines in the file may be hidden.

              Certain characters are special as in the / command:

              ^N or !
                     Display only lines which do NOT match the pattern.

              ^R     Don't interpret regular expression metacharacters; that is, do a simple textual comparison.

       :e [filename]
              Examine  a  new file.  If the filename is missing, the "current" file (see the :n and :p commands below) from the list of files in the command line is re-examined.  A percent sign (%) in the filename is
              replaced by the name of the current file.  A pound sign (#) is replaced by the name of the previously examined file.  However, two consecutive percent signs are simply replaced  with  a  single  percent
              sign.   This  allows  you  to enter a filename that contains a percent sign in the name.  Similarly, two consecutive pound signs are replaced with a single pound sign.  The filename is inserted into the
              command line list of files so that it can be seen by subsequent :n and :p commands.  If the filename consists of several files, they are all inserted into the list of files and the first  one  is  examâ
              ined.  If the filename contains one or more spaces, the entire filename should be enclosed in double quotes (also see the -" option).

       ^X^V or E
              Same as :e.  Warning: some systems use ^V as a special literalization character.  On such systems, you may not be able to use ^V.

       :n     Examine the next file (from the list of files given in the command line).  If a number N is specified, the N-th next file is examined.

       :p     Examine the previous file in the command line list.  If a number N is specified, the N-th previous file is examined.

       :x     Examine the first file in the command line list.  If a number N is specified, the N-th file in the list is examined.

       :d     Remove the current file from the list of files.

       t      Go to the next tag, if there were more than one matches for the current tag.  See the -t option for more details about tags.

       T      Go to the previous tag, if there were more than one matches for the current tag.

       = or ^G or :f
              Prints  some  information about the file being viewed, including its name and the line number and byte offset of the bottom line being displayed.  If possible, it also prints the length of the file, the
              number of lines in the file and the percent of the file above the last displayed line.

       -      Followed by one of the command line option letters (see OPTIONS below), this will change the setting of that option and print a message describing the new setting.  If a ^P (CONTROL-P) is entered  immeâ
              diately  after  the  dash, the setting of the option is changed but no message is printed.  If the option letter has a numeric value (such as -b or -h), or a string value (such as -P or -t), a new value
              may be entered after the option letter.  If no new value is entered, a message describing the current setting is printed and nothing is changed.

       --     Like the - command, but takes a long option name (see OPTIONS below) rather than a single option letter.  You must press ENTER or RETURN after typing the option name.  A ^P immediately after the  second
              dash suppresses printing of a message describing the new setting, as in the - command.

       -+     Followed  by  one of the command line option letters this will reset the option to its default setting and print a message describing the new setting.  (The "-+X" command does the same thing as "-+X" on
              the command line.)  This does not work for string-valued options.

       --+    Like the -+ command, but takes a long option name rather than a single option letter.

       -!     Followed by one of the command line option letters, this will reset the option to the "opposite" of its default setting and print a message describing the new setting.  This does not work for numeric or
              string-valued options.

       --!    Like the -! command, but takes a long option name rather than a single option letter.

       _      (Underscore.)  Followed by one of the command line option letters, this will print a message describing the current setting of that option.  The setting of the option is not changed.

       __     (Double underscore.)  Like the _ (underscore) command, but takes a long option name rather than a single option letter.  You must press ENTER or RETURN after typing the option name.

       +cmd   Causes the specified cmd to be executed each time a new file is examined.  For example, +G causes less to initially display each file starting at the end rather than the beginning.

       V      Prints the version number of less being run.

       q or Q or :q or :Q or ZZ
              Exits less.

       The following four commands may or may not be valid, depending on your particular installation.

       v      Invokes  an  editor to edit the current file being viewed.  The editor is taken from the environment variable VISUAL if defined, or EDITOR if VISUAL is not defined, or defaults to "vi" if neither VISUAL
              nor EDITOR is defined.  See also the discussion of LESSEDIT under the section on PROMPTS below.

       ! shell-command
              Invokes a shell to run the shell-command given.  A percent sign (%) in the command is replaced by the name of the current file.  A pound sign (#) is replaced by the name of the previously examined file.
              "!!" repeats the last shell command.  "!" with no shell command simply invokes a shell.  On Unix systems, the shell is taken from the environment variable SHELL, or defaults to "sh".  On MS-DOS and OS/2
              systems, the shell is the normal command processor.

       | <m> shell-command
              <m> represents any mark letter.  Pipes a section of the input file to the given shell command.  The section of the file to be piped is between the position marked by the letter and the  current  screen.
              The entire current screen is included, regardless of whether the marked position is before or after the current screen.  <m> may also be ^ or $ to indicate beginning or end of file respectively.  If <m>
              is . or newline, the current screen is piped.

       s filename
              Save the input to a file.  This only works if the input is a pipe, not an ordinary file.

OPTIONS
       Command line options are described below.  Most options may be changed while less is running, via the "-" command.

       Most options may be given in one of two forms: either a dash followed by a single letter, or two dashes followed by a long option name.  A long option name may be abbreviated as long as the abbreviation is unâ
       ambiguous.   For example, --quit-at-eof may be abbreviated --quit, but not --qui, since both --quit-at-eof and --quiet begin with --qui.  Some long option names are in uppercase, such as --QUIT-AT-EOF, as disâ
       tinct from --quit-at-eof.  Such option names need only have their first letter capitalized; the remainder of the name may be in either case.  For example, --Quit-at-eof is equivalent to --QUIT-AT-EOF.

       Options are also taken from the environment variable "LESS".  For example, to avoid typing "less -options ..." each time less is invoked, you might tell csh:

       setenv LESS "-options"

       or if you use sh:

       LESS="-options"; export LESS

       On MS-DOS, you don't need the quotes, but you should replace any percent signs in the options string by double percent signs.

       The environment variable is parsed before the command line, so command line options override the LESS environment variable.  If an option appears in the LESS variable, it can be reset to its default  value  on
       the command line by beginning the command line option with "-+".

       Some  options  like  -k  or -D require a string to follow the option letter.  The string for that option is considered to end when a dollar sign ($) is found.  For example, you can set two -D options on MS-DOS
       like this:

       LESS="Dn9.1$Ds4.1"

       If the --use-backslash option appears earlier in the options, then a dollar sign or backslash may be included literally in an option string by preceding it with a backslash.  If the --use-backslash  option  is
       not in effect, then backslashes are not treated specially, and there is no way to include a dollar sign in the option string.

       -? or --help
              This  option  displays a summary of the commands accepted by less (the same as the h command).  (Depending on how your shell interprets the question mark, it may be necessary to quote the question mark,
              thus: "-\?".)

       -a or --search-skip-screen
              By default, forward searches start at the top of the displayed screen and backwards searches start at the bottom of the displayed screen (except for repeated searches invoked by the  n  or  N  commands,
              which  start  after  or  before the "target" line respectively; see the -j option for more about the target line).  The -a option causes forward searches to instead start at the bottom of the screen and
              backward searches to start at the top of the screen, thus skipping all lines displayed on the screen.

       -A or --SEARCH-SKIP-SCREEN
              Causes all forward searches (not just non-repeated searches) to start just after the target line, and all backward searches to start just before the target line.  Thus, forward searches will  skip  part
              of  the  displayed  screen (from the first line up to and including the target line).  Similarly backwards searches will skip the displayed screen from the last line up to and including the target line.
              This was the default behavior in less versions prior to 441.

       -bn or --buffers=n
              Specifies the amount of buffer space less will use for each file, in units of kilobytes (1024 bytes).  By default 64 K of buffer space is used for each file (unless the file is a pipe; see  the  -B  opâ
              tion).  The -b option specifies instead that n kilobytes of buffer space should be used for each file.  If n is -1, buffer space is unlimited; that is, the entire file can be read into memory.

       -B or --auto-buffers
              By  default, when data is read from a pipe, buffers are allocated automatically as needed.  If a large amount of data is read from the pipe, this can cause a large amount of memory to be allocated.  The
              -B option disables this automatic allocation of buffers for pipes, so that only 64 K (or the amount of space specified by the -b option) is used for the pipe.  Warning: use of -B can result in erroneous
              display, since only the most recently viewed part of the piped data is kept in memory; any earlier data is lost.

       -c or --clear-screen
              Causes full screen repaints to be painted from the top line down.  By default, full screen repaints are done by scrolling from the bottom of the screen.

       -C or --CLEAR-SCREEN
              Same as -c, for compatibility with older versions of less.

       -d or --dumb
              The  -d  option suppresses the error message normally displayed if the terminal is dumb; that is, lacks some important capability, such as the ability to clear the screen or scroll backward.  The -d opâ
              tion does not otherwise change the behavior of less on a dumb terminal.

       -Dxcolor or --color=xcolor
              [MS-DOS only] Sets the color of the text displayed.  x is a single character which selects the type of text whose color is being set: n=normal, s=standout, d=bold, u=underlined,  k=blink.   color  is  a
              pair  of numbers separated by a period.  The first number selects the foreground color and the second selects the background color of the text.  A single number N is the same as N.M, where M is the norâ
              mal background color.  The color may start or end with u to use underline (with the normal color, if by itself), if the system supports it (Windows only).  x may also be a to toggle strict ANSI sequence
              rendering (SGR mode).

       -e or --quit-at-eof
              Causes less to automatically exit the second time it reaches end-of-file.  By default, the only way to exit less is via the "q" command.

       -E or --QUIT-AT-EOF
              Causes less to automatically exit the first time it reaches end-of-file.

       -f or --force
              Forces  non-regular files to be opened.  (A non-regular file is a directory or a device special file.)  Also suppresses the warning message when a binary file is opened.  By default, less will refuse to
              open non-regular files.  Note that some operating systems will not allow directories to be read, even if -f is set.

       -F or --quit-if-one-screen
              Causes less to automatically exit if the entire file can be displayed on the first screen.

       -g or --hilite-search
              Normally, less will highlight ALL strings which match the last search command.  The -g option changes this behavior to highlight only the particular string which was found by the  last  search  command.
              This can cause less to run somewhat faster than the default.

       -G or --HILITE-SEARCH
              The -G option suppresses all highlighting of strings found by search commands.

       -hn or --max-back-scroll=n
              Specifies  a maximum number of lines to scroll backward.  If it is necessary to scroll backward more than n lines, the screen is repainted in a forward direction instead.  (If the terminal does not have
              the ability to scroll backward, -h0 is implied.)

       -i or --ignore-case
              Causes searches to ignore case; that is, uppercase and lowercase are considered identical.  This option is ignored if any uppercase letters appear in the search pattern; in other  words,  if  a  pattern
              contains uppercase letters, then that search does not ignore case.

       -I or --IGNORE-CASE
              Like -i, but searches ignore case even if the pattern contains uppercase letters.

       -jn or --jump-target=n
              Specifies  a line on the screen where the "target" line is to be positioned.  The target line is the line specified by any command to search for a pattern, jump to a line number, jump to a file percentâ
              age or jump to a tag.  The screen line may be specified by a number: the top line on the screen is 1, the next is 2, and so on.  The number may be negative to specify a line relative to  the  bottom  of
              the screen: the bottom line on the screen is -1, the second to the bottom is -2, and so on.  Alternately, the screen line may be specified as a fraction of the height of the screen, starting with a decâ
              imal point: .5 is in the middle of the screen, .3 is three tenths down from the first line, and so on.  If the line is specified as a fraction, the actual line number is  recalculated  if  the  terminal
              window is resized, so that the target line remains at the specified fraction of the screen height.  If any form of the -j option is used, repeated forward searches (invoked with "n" or "N") begin at the
              line immediately after the target line, and repeated backward searches begin at the target line, unless changed by -a or -A.  For example, if "-j4" is used, the target line is the  fourth  line  on  the
              screen, so forward searches begin at the fifth line on the screen.  However nonrepeated searches (invoked with "/" or "?")  always begin at the start or end of the current screen respectively.

       -J or --status-column
              Displays a status column at the left edge of the screen.  The status column shows the lines that matched the current search, and any lines that are marked (via the m or M command).  The status column is
              also used if the -w or -W option is in effect.

       -kfilename or --lesskey-file=filename
              Causes less to open and interpret the named file as a lesskey (1) file.  Multiple -k options may be specified.  If the LESSKEY or LESSKEY_SYSTEM environment variable is set, or  if  a  lesskey  file  is
              found in a standard place (see KEY BINDINGS), it is also used as a lesskey file.

       -K or --quit-on-intr
              Causes  less  to  exit immediately (with status 2) when an interrupt character (usually ^C) is typed.  Normally, an interrupt character causes less to stop whatever it is doing and return to its command
              prompt.  Note that use of this option makes it impossible to return to the command prompt from the "F" command.

       -L or --no-lessopen
              Ignore the LESSOPEN environment variable (see the INPUT PREPROCESSOR section below).  This option can be set from within less, but it will apply only to files opened subsequently, not to the file  which
              is currently open.

       -m or --long-prompt
              Causes less to prompt verbosely (like more), with the percent into the file.  By default, less prompts with a colon.

       -M or --LONG-PROMPT
              Causes less to prompt even more verbosely than more.

       -n or --line-numbers
              Suppresses  line  numbers.   The default (to use line numbers) may cause less to run more slowly in some cases, especially with a very large input file.  Suppressing line numbers with the -n option will
              avoid this problem.  Using line numbers means: the line number will be displayed in the verbose prompt and in the = command, and the v command will pass the current line number to the editor  (see  also
              the discussion of LESSEDIT in PROMPTS below).

       -N or --LINE-NUMBERS
              Causes a line number to be displayed at the beginning of each line in the display.

       -ofilename or --log-file=filename
              Causes less to copy its input to the named file as it is being viewed.  This applies only when the input file is a pipe, not an ordinary file.  If the file already exists, less will ask for confirmation
              before overwriting it.

       -Ofilename or --LOG-FILE=filename
              The -O option is like -o, but it will overwrite an existing file without asking for confirmation.

              If no log file has been specified, the -o and -O options can be used from within less to specify a log file.  Without a file name, they will simply report the name of the log file.  The "s"  command  is
              equivalent to specifying -o from within less.

       -ppattern or --pattern=pattern
              The -p option on the command line is equivalent to specifying +/pattern; that is, it tells less to start at the first occurrence of pattern in the file.

       -Pprompt or --prompt=prompt
              Provides  a way to tailor the three prompt styles to your own preference.  This option would normally be put in the LESS environment variable, rather than being typed in with each less command.  Such an
              option must either be the last option in the LESS variable, or be terminated by a dollar sign.
               -Ps followed by a string changes the default (short) prompt to that string.
               -Pm changes the medium (-m) prompt.
               -PM changes the long (-M) prompt.
               -Ph changes the prompt for the help screen.
               -P= changes the message printed by the = command.
               -Pw changes the message printed while waiting for data (in the F command).

              All prompt strings consist of a sequence of letters and special escape sequences.  See the section on PROMPTS for more details.

       -q or --quiet or --silent
              Causes moderately "quiet" operation: the terminal bell is not rung if an attempt is made to scroll past the end of the file or before the beginning of the file.  If the terminal has a "visual bell",  it
              is used instead.  The bell will be rung on certain other errors, such as typing an invalid character.  The default is to ring the terminal bell in all such cases.

       -Q or --QUIET or --SILENT
              Causes totally "quiet" operation: the terminal bell is never rung.  If the terminal has a "visual bell", it is used in all cases where the terminal bell would have been rung.

       -r or --raw-control-chars
              Causes  "raw" control characters to be displayed.  The default is to display control characters using the caret notation; for example, a control-A (octal 001) is displayed as "^A".  Warning: when the -r
              option is used, less cannot keep track of the actual appearance of the screen (since this depends on how the screen responds to each type of control character).  Thus, various display problems  may  reâ
              sult, such as long lines being split in the wrong place.

       -R or --RAW-CONTROL-CHARS
              Like  -r,  but  only  ANSI "color" escape sequences are output in "raw" form.  Unlike -r, the screen appearance is maintained correctly in most cases.  ANSI "color" escape sequences are sequences of the
              form:

                   ESC [ ... m

              where the "..." is zero or more color specification characters For the purpose of keeping track of screen appearance, ANSI color escape sequences are assumed to not move the cursor.  You can  make  less
              think  that  characters  other than "m" can end ANSI color escape sequences by setting the environment variable LESSANSIENDCHARS to the list of characters which can end a color escape sequence.  And you
              can make less think that characters other than the standard ones may appear between the ESC and the m by setting the environment variable LESSANSIMIDCHARS to the list of characters which can appear.

       -s or --squeeze-blank-lines
              Causes consecutive blank lines to be squeezed into a single blank line.  This is useful when viewing nroff output.

       -S or --chop-long-lines
              Causes lines longer than the screen width to be chopped (truncated) rather than wrapped.  That is, the portion of a long line that does not fit in the screen width is not shown.  The default is to  wrap
              long lines; that is, display the remainder on the next line.

       -ttag or --tag=tag
              The  -t  option,  followed  immediately  by a TAG, will edit the file containing that tag.  For this to work, tag information must be available; for example, there may be a file in the current directory
              called "tags", which was previously built by ctags (1) or an equivalent command.  If the environment variable LESSGLOBALTAGS is set, it is taken to be the name of a command compatible with  global  (1),
              and  that  command is executed to find the tag.  (See http://www.gnu.org/software/global/global.html).  The -t option may also be specified from within less (using the - command) as a way of examining a
              new file.  The command ":t" is equivalent to specifying -t from within less.

       -Ttagsfile or --tag-file=tagsfile
              Specifies a tags file to be used instead of "tags".

       -u or --underline-special
              Causes backspaces and carriage returns to be treated as printable characters; that is, they are sent to the terminal when they appear in the input.

       -U or --UNDERLINE-SPECIAL
              Causes backspaces, tabs, carriage returns and "formatting characters" (as defined by Unicode) to be treated as control characters; that is, they are handled as specified by the -r option.

              By default, if neither -u nor -U is given, backspaces which appear adjacent to an underscore character are treated specially: the underlined text is displayed using the terminal's  hardware  underlining
              capability.  Also, backspaces which appear between two identical characters are treated specially: the overstruck text is printed using the terminal's hardware boldface capability.  Other backspaces are
              deleted, along with the preceding character.  Carriage returns immediately followed by a newline are deleted.  Other carriage returns are handled as specified by the -r option.  Text which is overstruck
              or underlined can be searched for if neither -u nor -U is in effect.

       -V or --version
              Displays the version number of less.

       -w or --hilite-unread
              Temporarily  highlights the first "new" line after a forward movement of a full page.  The first "new" line is the line immediately following the line previously at the bottom of the screen.  Also highâ
              lights the target line after a g or p command.  The highlight is removed at the next command which causes movement.  The entire line is highlighted, unless the -J option is in effect, in which case only
              the status column is highlighted.

       -W or --HILITE-UNREAD
              Like -w, but temporarily highlights the first new line after any forward movement command larger than one line.

       -xn,... or --tabs=n,...
              Sets  tab stops.  If only one n is specified, tab stops are set at multiples of n.  If multiple values separated by commas are specified, tab stops are set at those positions, and then continue with the
              same spacing as the last two.  For example, -x9,17 will set tabs at positions 9, 17, 25, 33, etc.  The default for n is 8.

       -X or --no-init
              Disables sending the termcap initialization and deinitialization strings to the terminal.  This is sometimes desirable if the deinitialization  string  does  something  unnecessary,  like  clearing  the
              screen.

       -yn or --max-forw-scroll=n
              Specifies  a maximum number of lines to scroll forward.  If it is necessary to scroll forward more than n lines, the screen is repainted instead.  The -c or -C option may be used to repaint from the top
              of the screen if desired.  By default, any forward movement causes scrolling.

       -zn or --window=n or -n
              Changes the default scrolling window size to n lines.  The default is one screenful.  The z and w commands can also be used to change the window size.  The "z" may be omitted for compatibility with some
              versions  of  more.   If  the  number  n is negative, it indicates n lines less than the current screen size.  For example, if the screen is 24 lines, -z-4 sets the scrolling window to 20 lines.  If the
              screen is resized to 40 lines, the scrolling window automatically changes to 36 lines.

       -"cc or --quotes=cc
              Changes the filename quoting character.  This may be necessary if you are trying to name a file which contains both spaces and quote characters.  Followed by a single character, this changes  the  quote
              character  to  that  character.   Filenames  containing a space should then be surrounded by that character rather than by double quotes.  Followed by two characters, changes the open quote to the first
              character, and the close quote to the second character.  Filenames containing a space should then be preceded by the open quote character and followed by the close quote character.  Note that even after
              the quote characters are changed, this option remains -" (a dash followed by a double quote).

       -~ or --tilde
              Normally lines after end of file are displayed as a single tilde (~).  This option causes lines after end of file to be displayed as blank lines.

       -# or --shift
              Specifies  the  default  number of positions to scroll horizontally in the RIGHTARROW and LEFTARROW commands.  If the number specified is zero, it sets the default number of positions to one half of the
              screen width.  Alternately, the number may be specified as a fraction of the width of the screen, starting with a decimal point: .5 is half of the screen width, .3 is three tenths of the  screen  width,
              and so on.  If the number is specified as a fraction, the actual number of scroll positions is recalculated if the terminal window is resized, so that the actual scroll remains at the specified fraction
              of the screen width.

       --follow-name
              Normally, if the input file is renamed while an F command is executing, less will continue to display the contents of the original file despite its name change.  If --follow-name is specified, during an
              F  command  less  will  periodically attempt to reopen the file by name.  If the reopen succeeds and the file is a different file from the original (which means that a new file has been created with the
              same name as the original (now renamed) file), less will display the contents of that new file.

       --mouse
              Enables mouse input: scrolling the mouse wheel down moves forward in the file, scrolling the mouse wheel up moves backwards in the file, and clicking the mouse sets the "#" mark to the  line  where  the
              mouse  is  clicked.  The number of lines to scroll when the wheel is moved can be set by the --wheel-lines option.  Mouse input works only on terminals which support X11 mouse reporting, and on the Winâ
              dows version of less.

       --MOUSE
              Like --mouse, except the direction scrolled on mouse wheel movement is reversed.

       --no-keypad
              Disables sending the keypad initialization and deinitialization strings to the terminal.  This is sometimes useful if the keypad strings make the numeric keypad behave in an undesirable manner.

       --no-histdups
              This option changes the behavior so that if a search string or file name is typed in, and the same string is already in the history list, the existing copy is removed from the history  list  before  the
              new one is added.  Thus, a given string will appear only once in the history list.  Normally, a string may appear multiple times.

       --rscroll
              This  option  changes  the character used to mark truncated lines.  It may begin with a two-character attribute indicator like LESSBINFMT does.  If there is no attribute indicator, standout is used.  If
              set to "-", truncated lines are not marked.

       --save-marks
              Save marks in the history file, so marks are retained across different invocations of less.

       --use-backslash
              This option changes the interpretations of options which follow this one.  After the --use-backslash option, any backslash in an option string is removed and the following character is taken  literally.
              This allows a dollar sign to be included in option strings.

       --wheel-lines=n
              Set the number of lines to scroll when the mouse wheel is scrolled and the --mouse or --MOUSE option is in effect.  The default is 1 line.

       --     A  command  line  argument  of "--" marks the end of option arguments.  Any arguments following this are interpreted as filenames.  This can be useful when viewing a file whose name begins with a "-" or
              "+".

       +      If a command line option begins with +, the remainder of that option is taken to be an initial command to less.  For example, +G tells less to start at the end of the file rather than the beginning, and
              +/xyz  tells  it  to start at the first occurrence of "xyz" in the file.  As a special case, +<number> acts like +<number>g; that is, it starts the display at the specified line number (however, see the
              caveat under the "g" command above).  If the option starts with ++, the initial command applies to every file being viewed, not just the first one.  The + command described previously may also  be  used
              to set (or change) an initial command for every file.

LINE EDITING
       When entering command line at the bottom of the screen (for example, a filename for the :e command, or the pattern for a search command), certain keys can be used to manipulate the command line.  Most commands
       have an alternate form in [ brackets ] which can be used if a key does not exist on a particular keyboard.  (Note that the forms beginning with ESC do not work in some MS-DOS and Windows systems because ESC is
       the  line  erase character.)  Any of these special keys may be entered literally by preceding it with the "literal" character, either ^V or ^A.  A backslash itself may also be entered literally by entering two
       backslashes.

       LEFTARROW [ ESC-h ]
              Move the cursor one space to the left.

       RIGHTARROW [ ESC-l ]
              Move the cursor one space to the right.

       ^LEFTARROW [ ESC-b or ESC-LEFTARROW ]
              (That is, CONTROL and LEFTARROW simultaneously.)  Move the cursor one word to the left.

       ^RIGHTARROW [ ESC-w or ESC-RIGHTARROW ]
              (That is, CONTROL and RIGHTARROW simultaneously.)  Move the cursor one word to the right.

       HOME [ ESC-0 ]
              Move the cursor to the beginning of the line.

       END [ ESC-$ ]
              Move the cursor to the end of the line.

       BACKSPACE
              Delete the character to the left of the cursor, or cancel the command if the command line is empty.

       DELETE or [ ESC-x ]
              Delete the character under the cursor.

       ^BACKSPACE [ ESC-BACKSPACE ]
              (That is, CONTROL and BACKSPACE simultaneously.)  Delete the word to the left of the cursor.

       ^DELETE [ ESC-X or ESC-DELETE ]
              (That is, CONTROL and DELETE simultaneously.)  Delete the word under the cursor.

       UPARROW [ ESC-k ]
              Retrieve the previous command line.  If you first enter some text and then press UPARROW, it will retrieve the previous command which begins with that text.

       DOWNARROW [ ESC-j ]
              Retrieve the next command line.  If you first enter some text and then press DOWNARROW, it will retrieve the next command which begins with that text.

       TAB    Complete the partial filename to the left of the cursor.  If it matches more than one filename, the first match is entered into the command line.  Repeated TABs will cycle thru the other matching  fileâ
              names.   If  the completed filename is a directory, a "/" is appended to the filename.  (On MS-DOS systems, a "\" is appended.)  The environment variable LESSSEPARATOR can be used to specify a different
              character to append to a directory name.

       BACKTAB [ ESC-TAB ]
              Like, TAB, but cycles in the reverse direction thru the matching filenames.

       ^L     Complete the partial filename to the left of the cursor.  If it matches more than one filename, all matches are entered into the command line (if they fit).

       ^U (Unix and OS/2) or ESC (MS-DOS)
              Delete the entire command line, or cancel the command if the command line is empty.  If you have changed your line-kill character in Unix to something other than ^U, that character is  used  instead  of
              ^U.

       ^G     Delete the entire command line and return to the main prompt.

KEY BINDINGS
       You  may define your own less commands by using the program lesskey (1) to create a lesskey file.  This file specifies a set of command keys and an action associated with each key.  You may also use lesskey to
       change the line-editing keys (see LINE EDITING), and to set environment variables.  If the environment variable LESSKEY is set, less uses that as the name of the lesskey file.  Otherwise, less looks in a stanâ
       dard  place for the lesskey file: On Unix systems, less looks for a lesskey file called "$HOME/.less".  On MS-DOS and Windows systems, less looks for a lesskey file called "$HOME/_less", and if it is not found
       there, then looks for a lesskey file called "_less" in any directory specified in the PATH environment variable.  On OS/2 systems, less looks for a lesskey file called "$HOME/less.ini", and if it is not found,
       then  looks  for a lesskey file called "less.ini" in any directory specified in the INIT environment variable, and if it not found there, then looks for a lesskey file called "less.ini" in any directory speciâ
       fied in the PATH environment variable.  See the lesskey manual page for more details.

       A system-wide lesskey file may also be set up to provide key bindings.  If a key is defined in both a local lesskey file and in the system-wide file, key bindings in the local file take precedence  over  those
       in  the  system-wide file.  If the environment variable LESSKEY_SYSTEM is set, less uses that as the name of the system-wide lesskey file.  Otherwise, less looks in a standard place for the system-wide lesskey
       file: On Unix systems, the system-wide lesskey file is /usr/local/etc/sysless.  (However, if less was built with a different sysconf directory than /usr/local/etc, that directory is where the sysless  file  is
       found.)  On MS-DOS and Windows systems, the system-wide lesskey file is c:\_sysless.  On OS/2 systems, the system-wide lesskey file is c:\sysless.ini.

INPUT PREPROCESSOR
       You  may  define an "input preprocessor" for less.  Before less opens a file, it first gives your input preprocessor a chance to modify the way the contents of the file are displayed.  An input preprocessor is
       simply an executable program (or shell script), which writes the contents of the file to a different file, called the replacement file.  The contents of the replacement file are then displayed in place of  the
       contents of the original file.  However, it will appear to the user as if the original file is opened; that is, less will display the original filename as the name of the current file.

       An input preprocessor receives one command line argument, the original filename, as entered by the user.  It should create the replacement file, and when finished, print the name of the replacement file to its
       standard output.  If the input preprocessor does not output a replacement filename, less uses the original file, as normal.  The input preprocessor is not called when viewing standard input.  To set up an  inâ
       put  preprocessor, set the LESSOPEN environment variable to a command line which will invoke your input preprocessor.  This command line should include one occurrence of the string "%s", which will be replaced
       by the filename when the input preprocessor command is invoked.

       When less closes a file opened in such a way, it will call another program, called the input postprocessor, which may perform any desired clean-up action (such as  deleting  the  replacement  file  created  by
       LESSOPEN).   This  program receives two command line arguments, the original filename as entered by the user, and the name of the replacement file.  To set up an input postprocessor, set the LESSCLOSE environâ
       ment variable to a command line which will invoke your input postprocessor.  It may include two occurrences of the string "%s"; the first is replaced with the original name of the file and the second with  the
       name of the replacement file, which was output by LESSOPEN.

       For example, on many Unix systems, these two scripts will allow you to keep files in compressed format, but still let less view them directly:

       lessopen.sh:
            #! /bin/sh
            case "$1" in
            *.Z) TEMPFILE=$(mktemp)
                 uncompress -c $1  >$TEMPFILE  2>/dev/null
                 if [ -s $TEMPFILE ]; then
                      echo $TEMPFILE
                 else
                      rm -f $TEMPFILE
                 fi
                 ;;
            esac

       lessclose.sh:
            #! /bin/sh
            rm $2

       To use these scripts, put them both where they can be executed and set LESSOPEN="lessopen.sh %s", and LESSCLOSE="lessclose.sh %s %s".  More complex LESSOPEN and LESSCLOSE scripts may be written to accept other
       types of compressed files, and so on.

       It is also possible to set up an input preprocessor to pipe the file data directly to less, rather than putting the data into a replacement file.  This avoids the need to  decompress  the  entire  file  before
       starting  to view it.  An input preprocessor that works this way is called an input pipe.  An input pipe, instead of writing the name of a replacement file on its standard output, writes the entire contents of
       the replacement file on its standard output.  If the input pipe does not write any characters on its standard output, then there is no replacement file and less uses the original file, as normal.   To  use  an
       input  pipe,  make the first character in the LESSOPEN environment variable a vertical bar (|) to signify that the input preprocessor is an input pipe.  As with non-pipe input preprocessors, the command string
       must contain one occurrence of %s, which is replaced with the filename of the input file.

       For example, on many Unix systems, this script will work like the previous example scripts:

       lesspipe.sh:
            #! /bin/sh
            case "$1" in
            *.Z) uncompress -c $1  2>/dev/null
                 ;;
            *)   exit 1
                 ;;
            esac
            exit $?

       To use this script, put it where it can be executed and set LESSOPEN="|lesspipe.sh %s".

       Note that a preprocessor cannot output an empty file, since that is interpreted as meaning there is no replacement, and the original file is used.  To avoid this, if LESSOPEN starts with two vertical bars, the
       exit  status  of  the script becomes meaningful.  If the exit status is zero, the output is considered to be replacement text, even if it is empty.  If the exit status is nonzero, any output is ignored and the
       original file is used.  For compatibility with previous versions of less, if LESSOPEN starts with only one vertical bar, the exit status of the preprocessor is ignored.

       When an input pipe is used, a LESSCLOSE postprocessor can be used, but it is usually not necessary since there is no replacement file to clean up.  In this case, the replacement file name passed to  the  LESSâ
       CLOSE postprocessor is "-".

       For  compatibility with previous versions of less, the input preprocessor or pipe is not used if less is viewing standard input.  However, if the first character of LESSOPEN is a dash (-), the input preprocesâ
       sor is used on standard input as well as other files.  In this case, the dash is not considered to be part of the preprocessor command.  If standard input is being viewed, the input preprocessor  is  passed  a
       file name consisting of a single dash.  Similarly, if the first two characters of LESSOPEN are vertical bar and dash (|-) or two vertical bars and a dash (||-), the input pipe is used on standard input as well
       as other files.  Again, in this case the dash is not considered to be part of the input pipe command.

NATIONAL CHARACTER SETS
       There are three types of characters in the input file:

       normal characters
              can be displayed directly to the screen.

       control characters
              should not be displayed directly, but are expected to be found in ordinary text files (such as backspace and tab).

       binary characters
              should not be displayed directly and are not expected to be found in text files.

       A "character set" is simply a description of which characters are to be considered normal, control, and binary.  The LESSCHARSET environment variable may be used to select a character set.  Possible values for
       LESSCHARSET are:

       ascii  BS, TAB, NL, CR, and formfeed are control characters, all chars with values between 32 and 126 are normal, and all others are binary.

       iso8859
              Selects an ISO 8859 character set.  This is the same as ASCII, except characters between 160 and 255 are treated as normal characters.

       latin1 Same as iso8859.

       latin9 Same as iso8859.

       dos    Selects a character set appropriate for MS-DOS.

       ebcdic Selects an EBCDIC character set.

       IBM-1047
              Selects  an  EBCDIC character set used by OS/390 Unix Services.  This is the EBCDIC analogue of latin1.  You get similar results by setting either LESSCHARSET=IBM-1047 or LC_CTYPE=en_US in your environâ
              ment.

       koi8-r Selects a Russian character set.

       next   Selects a character set appropriate for NeXT computers.

       utf-8  Selects the UTF-8 encoding of the ISO 10646 character set.  UTF-8 is special in that it supports multi-byte characters in the input file.  It is the only character set that supports  multi-byte  characâ
              ters.

       windows
              Selects a character set appropriate for Microsoft Windows (cp 1251).

       In  rare  cases, it may be desired to tailor less to use a character set other than the ones definable by LESSCHARSET.  In this case, the environment variable LESSCHARDEF can be used to define a character set.
       It should be set to a string where each character in the string represents one character in the character set.  The character "." is used for a normal character, "c" for control, and "b" for binary.  A decimal
       number  may  be  used for repetition.  For example, "bccc4b." would mean character 0 is binary, 1, 2 and 3 are control, 4, 5, 6 and 7 are binary, and 8 is normal.  All characters after the last are taken to be
       the same as the last, so characters 9 through 255 would be normal.  (This is an example, and does not necessarily represent any real character set.)

       This table shows the value of LESSCHARDEF which is equivalent to each of the possible values for LESSCHARSET:

            ascii     8bcccbcc18b95.b
            dos       8bcccbcc12bc5b95.b.
            ebcdic    5bc6bcc7bcc41b.9b7.9b5.b..8b6.10b6.b9.7b
                      9.8b8.17b3.3b9.7b9.8b8.6b10.b.b.b.
            IBM-1047  4cbcbc3b9cbccbccbb4c6bcc5b3cbbc4bc4bccbc
                      191.b
            iso8859   8bcccbcc18b95.33b.
            koi8-r    8bcccbcc18b95.b128.
            latin1    8bcccbcc18b95.33b.
            next      8bcccbcc18b95.bb125.bb

       If neither LESSCHARSET nor LESSCHARDEF is set, but any of the strings "UTF-8", "UTF8", "utf-8" or "utf8" is found in the LC_ALL, LC_CTYPE or LANG environment variables, then the default character set is utf-8.

       If that string is not found, but your system supports the setlocale interface, less will use setlocale to determine the character set.  setlocale is controlled by setting the LANG or LC_CTYPE environment variâ
       ables.

       Finally, if the setlocale interface is also not available, the default character set is latin1.

       Control  and  binary characters are displayed in standout (reverse video).  Each such character is displayed in caret notation if possible (e.g. ^A for control-A).  Caret notation is used only if inverting the
       0100 bit results in a normal printable character.  Otherwise, the character is displayed as a hex number in angle brackets.  This format can be changed by setting the LESSBINFMT  environment  variable.   LESSâ
       BINFMT  may  begin  with  a "*" and one character to select the display attribute: "*k" is blinking, "*d" is bold, "*u" is underlined, "*s" is standout, and "*n" is normal.  If LESSBINFMT does not begin with a
       "*", normal attribute is assumed.  The remainder of LESSBINFMT is a string which may include one printf-style escape sequence (a % followed by x, X, o, d, etc.).  For example, if LESSBINFMT is "*u[%x]", binary
       characters  are displayed in underlined hexadecimal surrounded by brackets.  The default if no LESSBINFMT is specified is "*s<%02X>".  Warning: the result of expanding the character via LESSBINFMT must be less
       than 31 characters.

       When the character set is utf-8, the LESSUTFBINFMT environment variable acts similarly to LESSBINFMT but it applies to Unicode code points that were successfully decoded but are unsuitable for  display  (e.g.,
       unassigned  code points).  Its default value is "<U+%04lX>".  Note that LESSUTFBINFMT and LESSBINFMT share their display attribute setting ("*x") so specifying one will affect both; LESSUTFBINFMT is read after
       LESSBINFMT so its setting, if any, will have priority.  Problematic octets in a UTF-8 file (octets of a truncated sequence, octets of a complete but non-shortest form sequence, illegal octets, and stray trailâ
       ing octets) are displayed individually using LESSBINFMT so as to facilitate diagnostic of how the UTF-8 file is ill-formed.

PROMPTS
       The  -P  option  allows  you  to tailor the prompt to your preference.  The string given to the -P option replaces the specified prompt string.  Certain characters in the string are interpreted specially.  The
       prompt mechanism is rather complicated to provide flexibility, but the ordinary user need not understand the details of constructing personalized prompt strings.

       A percent sign followed by a single character is expanded according to what the following character is:

       %bX    Replaced by the byte offset into the current input file.  The b is followed by a single character (shown as X above) which specifies the line whose byte offset is to be used.  If the character is a "t",
              the  byte  offset  of the top line in the display is used, an "m" means use the middle line, a "b" means use the bottom line, a "B" means use the line just after the bottom line, and a "j" means use the
              "target" line, as specified by the -j option.

       %B     Replaced by the size of the current input file.

       %c     Replaced by the column number of the text appearing in the first column of the screen.

       %dX    Replaced by the page number of a line in the input file.  The line to be used is determined by the X, as with the %b option.

       %D     Replaced by the number of pages in the input file, or equivalently, the page number of the last line in the input file.

       %E     Replaced by the name of the editor (from the VISUAL environment variable, or the EDITOR environment variable if VISUAL is not defined).  See the discussion of the LESSEDIT feature below.

       %f     Replaced by the name of the current input file.

       %F     Replaced by the last component of the name of the current input file.

       %g     Replaced by the shell-escaped name of the current input file.  This is useful when the expanded string will be used in a shell command, such as in LESSEDIT.

       %i     Replaced by the index of the current file in the list of input files.

       %lX    Replaced by the line number of a line in the input file.  The line to be used is determined by the X, as with the %b option.

       %L     Replaced by the line number of the last line in the input file.

       %m     Replaced by the total number of input files.

       %pX    Replaced by the percent into the current input file, based on byte offsets.  The line used is determined by the X as with the %b option.

       %PX    Replaced by the percent into the current input file, based on line numbers.  The line used is determined by the X as with the %b option.

       %s     Same as %B.

       %t     Causes any trailing spaces to be removed.  Usually used at the end of the string, but may appear anywhere.

       %T     Normally expands to the word "file".  However if viewing files via a tags list using the -t option, it expands to the word "tag".

       %x     Replaced by the name of the next input file in the list.

       If any item is unknown (for example, the file size if input is a pipe), a question mark is printed instead.

       The format of the prompt string can be changed depending on certain conditions.  A question mark followed by a single character acts like an "IF": depending on the following character, a  condition  is  evaluâ
       ated.  If the condition is true, any characters following the question mark and condition character, up to a period, are included in the prompt.  If the condition is false, such characters are not included.  A
       colon appearing between the question mark and the period can be used to establish an "ELSE": any characters between the colon and the period are included in the string if and only if the IF condition is false.
       Condition characters (which follow a question mark) may be:

       ?a     True if any characters have been included in the prompt so far.

       ?bX    True if the byte offset of the specified line is known.

       ?B     True if the size of current input file is known.

       ?c     True if the text is horizontally shifted (%c is not zero).

       ?dX    True if the page number of the specified line is known.

       ?e     True if at end-of-file.

       ?f     True if there is an input filename (that is, if input is not a pipe).

       ?lX    True if the line number of the specified line is known.

       ?L     True if the line number of the last line in the file is known.

       ?m     True if there is more than one input file.

       ?n     True if this is the first prompt in a new input file.

       ?pX    True if the percent into the current input file, based on byte offsets, of the specified line is known.

       ?PX    True if the percent into the current input file, based on line numbers, of the specified line is known.

       ?s     Same as "?B".

       ?x     True if there is a next input file (that is, if the current input file is not the last one).

       Any  characters other than the special ones (question mark, colon, period, percent, and backslash) become literally part of the prompt.  Any of the special characters may be included in the prompt literally by
       preceding it with a backslash.

       Some examples:

       ?f%f:Standard input.

       This prompt prints the filename, if known; otherwise the string "Standard input".

       ?f%f .?ltLine %lt:?pt%pt\%:?btByte %bt:-...

       This prompt would print the filename, if known.  The filename is followed by the line number, if known, otherwise the percent if known, otherwise the byte offset if known.  Otherwise, a dash is  printed.   Noâ
       tice how each question mark has a matching period, and how the % after the %pt is included literally by escaping it with a backslash.

       ?n?f%f .?m(%T %i of %m) ..?e(END) ?x- Next\: %x..%t";

       This  prints  the filename if this is the first prompt in a file, followed by the "file N of N" message if there is more than one input file.  Then, if we are at end-of-file, the string "(END)" is printed folâ
       lowed by the name of the next file, if there is one.  Finally, any trailing spaces are truncated.  This is the default prompt.  For reference, here are the defaults for the other two prompts (-m and -M respecâ
       tively).  Each is broken into two lines here for readability only.

       ?n?f%f .?m(%T %i of %m) ..?e(END) ?x- Next\: %x.:
            ?pB%pB\%:byte %bB?s/%s...%t

       ?f%f .?n?m(%T %i of %m) ..?ltlines %lt-%lb?L/%L. :
            byte %bB?s/%s. .?e(END) ?x- Next\: %x.:?pB%pB\%..%t

       And here is the default message produced by the = command:

       ?f%f .?m(%T %i of %m) .?ltlines %lt-%lb?L/%L. .
            byte %bB?s/%s. ?e(END) :?pB%pB\%..%t

       The  prompt expansion features are also used for another purpose: if an environment variable LESSEDIT is defined, it is used as the command to be executed when the v command is invoked.  The LESSEDIT string is
       expanded in the same way as the prompt strings.  The default value for LESSEDIT is:

            %E ?lm+%lm. %g

       Note that this expands to the editor name, followed by a + and the line number, followed by the shell-escaped file name.  If your editor does not accept the "+linenumber" syntax, or has  other  differences  in
       invocation syntax, the LESSEDIT variable can be changed to modify this default.

SECURITY
       When the environment variable LESSSECURE is set to 1, less runs in a "secure" mode.  This means these features are disabled:

              !      the shell command

              |      the pipe command

              :e     the examine command.

              v      the editing command

              s  -o  log files

              -k     use of lesskey files

              -t     use of tags files

                     metacharacters in filenames, such as *

                     filename completion (TAB, ^L)

       Less can also be compiled to be permanently in "secure" mode.

COMPATIBILITY WITH MORE
       If the environment variable LESS_IS_MORE is set to 1, or if the program is invoked via a file link named "more", less behaves (mostly) in conformance with the POSIX "more" command specification.  In this mode,
       less behaves differently in these ways:

       The -e option works differently.  If the -e option is not set, less behaves as if the -e option were set.  If the -e option is set, less behaves as if the -E option were set.

       The -m option works differently.  If the -m option is not set, the medium prompt is used, and it is prefixed with the string "--More--".  If the -m option is set, the short prompt is used.

       The -n option acts like the -z option.  The normal behavior of the -n option is unavailable in this mode.

       The parameter to the -p option is taken to be a less command rather than a search pattern.

       The LESS environment variable is ignored, and the MORE environment variable is used in its place.

ENVIRONMENT VARIABLES
       Environment variables may be specified either in the system environment as usual, or in a lesskey (1) file.  If environment variables are defined in more than one place, variables defined in  a  local  lesskey
       file take precedence over variables defined in the system environment, which take precedence over variables defined in the system-wide lesskey file.

       COLUMNS
              Sets  the  number  of  columns on the screen.  Takes precedence over the number of columns specified by the TERM variable.  (But if you have a windowing system which supports TIOCGWINSZ or WIOCGETD, the
              window system's idea of the screen size takes precedence over the LINES and COLUMNS environment variables.)

       EDITOR The name of the editor (used for the v command).

       HOME   Name of the user's home directory (used to find a lesskey file on Unix and OS/2 systems).

       HOMEDRIVE, HOMEPATH
              Concatenation of the HOMEDRIVE and HOMEPATH environment variables is the name of the user's home directory if the HOME variable is not set (only in the Windows version).

       INIT   Name of the user's init directory (used to find a lesskey file on OS/2 systems).

       LANG   Language for determining the character set.

       LC_CTYPE
              Language for determining the character set.

       LESS   Options which are passed to less automatically.

       LESSANSIENDCHARS
              Characters which may end an ANSI color escape sequence (default "m").

       LESSANSIMIDCHARS
              Characters which may appear between the ESC character and the end character in an ANSI color escape sequence (default "0123456789:;[?!"'#%()*+ ".

       LESSBINFMT
              Format for displaying non-printable, non-control characters.

       LESSCHARDEF
              Defines a character set.

       LESSCHARSET
              Selects a predefined character set.

       LESSCLOSE
              Command line to invoke the (optional) input-postprocessor.

       LESSECHO
              Name of the lessecho program (default "lessecho").  The lessecho program is needed to expand metacharacters, such as * and ?, in filenames on Unix systems.

       LESSEDIT
              Editor prototype string (used for the v command).  See discussion under PROMPTS.

       LESSGLOBALTAGS
              Name of the command used by the -t option to find global tags.  Normally should be set to "global" if your system has the global (1) command.  If not set, global tags are not used.

       LESSHISTFILE
              Name of the history file used to remember search commands and shell commands between invocations of less.  If set to "-" or "/dev/null", a history file is not used.  The default is  "$HOME/.lesshst"  on
              Unix systems, "$HOME/_lesshst" on DOS and Windows systems, or "$HOME/lesshst.ini" or "$INIT/lesshst.ini" on OS/2 systems.

       LESSHISTSIZE
              The maximum number of commands to save in the history file.  The default is 100.

       LESSKEY
              Name of the default lesskey(1) file.

       LESSKEY_SYSTEM
              Name of the default system-wide lesskey(1) file.

       LESSMETACHARS
              List of characters which are considered "metacharacters" by the shell.

       LESSMETAESCAPE
              Prefix which less will add before each metacharacter in a command sent to the shell.  If LESSMETAESCAPE is an empty string, commands containing metacharacters will not be passed to the shell.

       LESSOPEN
              Command line to invoke the (optional) input-preprocessor.

       LESSSECURE
              Runs less in "secure" mode.  See discussion under SECURITY.

       LESSSEPARATOR
              String to be appended to a directory name in filename completion.

       LESSUTFBINFMT
              Format for displaying non-printable Unicode code points.

       LESS_IS_MORE
              Emulate the more (1) command.

       LINES  Sets  the number of lines on the screen.  Takes precedence over the number of lines specified by the TERM variable.  (But if you have a windowing system which supports TIOCGWINSZ or WIOCGETD, the window
              system's idea of the screen size takes precedence over the LINES and COLUMNS environment variables.)

       MORE   Options which are passed to less automatically when running in more compatible mode.

       PATH   User's search path (used to find a lesskey file on MS-DOS and OS/2 systems).

       SHELL  The shell used to execute the ! command, as well as to expand filenames.

       TERM   The type of terminal on which less is being run.

       VISUAL The name of the editor (used for the v command).

SEE ALSO
       lesskey(1)

COPYRIGHT
       Copyright (C) 1984-2019  Mark Nudelman

       less is part of the GNU project and is free software.  You can redistribute it and/or modify it under the terms of either (1) the GNU General Public License as published by the Free Software Foundation; or (2)
       the Less License.  See the file README in the less distribution for more details regarding redistribution.  You should have received a copy of the GNU General Public License along with the source for less; see
       the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.  You should also have received a copy of the Less License; see the file LICENSE.

       less is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General  Public  License
       for more details.

AUTHOR
       Mark Nudelman
       Report bugs at https://github.com/gwsw/less/issues.
       For more information, see the less homepage at
       http://www.greenwoodsoftware.com/less.

                                                                                                Version 551: 11 Jun 2019                                                                                         LESS(1)
GIT(1)                                                                                                 Git Manual                                                                                                 GIT(1)

NAME
       git - the stupid content tracker

SYNOPSIS
       git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>]
           <command> [<args>]

DESCRIPTION
       Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.

       See gittutorial(7) to get started, then see giteveryday(7) for a useful minimum set of commands. The Git Userâs Manual[1] has a more in-depth introduction.

       After you mastered the basic concepts, you can come back to this page to learn what commands Git offers. You can learn more about individual Git commands with "git help command". gitcli(7) manual page gives
       you an overview of the command-line command syntax.

       A formatted and hyperlinked copy of the latest Git documentation can be viewed at https://git.github.io/htmldocs/git.html or https://git-scm.com/docs.

OPTIONS
       --version
           Prints the Git suite version that the git program came from.

       --help
           Prints the synopsis and a list of the most commonly used commands. If the option --all or -a is given then all available commands are printed. If a Git command is named this option will bring up the manual
           page for that command.

           Other options are available to control how the manual page is displayed. See git-help(1) for more information, because git --help ...  is converted internally into git help ....

       -C <path>
           Run as if git was started in <path> instead of the current working directory. When multiple -C options are given, each subsequent non-absolute -C <path> is interpreted relative to the preceding -C <path>.
           If <path> is present but empty, e.g.  -C "", then the current working directory is left unchanged.

           This option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be made relative to the working directory caused by the -C option. For
           example the following invocations are equivalent:

               git --git-dir=a.git --work-tree=b -C c status
               git --git-dir=c/a.git --work-tree=c/b status

       -c <name>=<value>
           Pass a configuration parameter to the command. The value given will override values from configuration files. The <name> is expected in the same format as listed by git config (subkeys separated by dots).

           Note that omitting the = in git -c foo.bar ...  is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a config file). Including the equals but with an empty value (like git -c
           foo.bar= ...) sets foo.bar to the empty string which git config --type=bool will convert to false.

       --exec-path[=<path>]
           Path to wherever your core Git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH environment variable. If no path is given, git will print the current setting and then exit.

       --html-path
           Print the path, without trailing slash, where Gitâs HTML documentation is installed and exit.

       --man-path
           Print the manpath (see man(1)) for the man pages for this version of Git and exit.

       --info-path
           Print the path where the Info files documenting this version of Git are installed and exit.

       -p, --paginate
           Pipe all output into less (or if set, $PAGER) if standard output is a terminal. This overrides the pager.<cmd> configuration options (see the "Configuration Mechanism" section below).

       -P, --no-pager
           Do not pipe Git output into a pager.

       --git-dir=<path>
           Set the path to the repository. This can also be controlled by setting the GIT_DIR environment variable. It can be an absolute path or relative path to current working directory.

       --work-tree=<path>
           Set the path to the working tree. It can be an absolute path or a path relative to the current working directory. This can also be controlled by setting the GIT_WORK_TREE environment variable and the
           core.worktree configuration variable (see core.worktree in git-config(1) for a more detailed discussion).

       --namespace=<path>
           Set the Git namespace. See gitnamespaces(7) for more details. Equivalent to setting the GIT_NAMESPACE environment variable.

       --super-prefix=<path>
           Currently for internal use only. Set a prefix which gives a path from above a repository down to its root. One use is to give submodules context about the superproject that invoked it.

       --bare
           Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.

       --no-replace-objects
           Do not use replacement refs to replace Git objects. See git-replace(1) for more information.

       --literal-pathspecs
           Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to setting the GIT_LITERAL_PATHSPECS environment variable to 1.

       --glob-pathspecs
           Add "glob" magic to all pathspec. This is equivalent to setting the GIT_GLOB_PATHSPECS environment variable to 1. Disabling globbing on individual pathspecs can be done using pathspec magic ":(literal)"

       --noglob-pathspecs
           Add "literal" magic to all pathspec. This is equivalent to setting the GIT_NOGLOB_PATHSPECS environment variable to 1. Enabling globbing on individual pathspecs can be done using pathspec magic ":(glob)"

       --icase-pathspecs
           Add "icase" magic to all pathspec. This is equivalent to setting the GIT_ICASE_PATHSPECS environment variable to 1.

       --no-optional-locks
           Do not perform optional operations that require locks. This is equivalent to setting the GIT_OPTIONAL_LOCKS to 0.

       --list-cmds=group[,group...]
           List commands by group. This is an internal/experimental option and may change or be removed in the future. Supported groups are: builtins, parseopt (builtin commands that use parse-options), main (all
           commands in libexec directory), others (all other commands in $PATH that have git- prefix), list-<category> (see categories in command-list.txt), nohelpers (exclude helper commands), alias and config
           (retrieve command list from config variable completion.commands)

GIT COMMANDS
       We divide Git into high level ("porcelain") commands and low level ("plumbing") commands.

HIGH-LEVEL COMMANDS (PORCELAIN)
       We separate the porcelain commands into the main commands and some ancillary user utilities.

   Main porcelain commands
       git-add(1)
           Add file contents to the index.

       git-am(1)
           Apply a series of patches from a mailbox.

       git-archive(1)
           Create an archive of files from a named tree.

       git-bisect(1)
           Use binary search to find the commit that introduced a bug.

       git-branch(1)
           List, create, or delete branches.

       git-bundle(1)
           Move objects and refs by archive.

       git-checkout(1)
           Switch branches or restore working tree files.

       git-cherry-pick(1)
           Apply the changes introduced by some existing commits.

       git-citool(1)
           Graphical alternative to git-commit.

       git-clean(1)
           Remove untracked files from the working tree.

       git-clone(1)
           Clone a repository into a new directory.

       git-commit(1)
           Record changes to the repository.

       git-describe(1)
           Give an object a human readable name based on an available ref.

       git-diff(1)
           Show changes between commits, commit and working tree, etc.

       git-fetch(1)
           Download objects and refs from another repository.

       git-format-patch(1)
           Prepare patches for e-mail submission.

       git-gc(1)
           Cleanup unnecessary files and optimize the local repository.

       git-grep(1)
           Print lines matching a pattern.

       git-gui(1)
           A portable graphical interface to Git.

       git-init(1)
           Create an empty Git repository or reinitialize an existing one.

       git-log(1)
           Show commit logs.

       git-merge(1)
           Join two or more development histories together.

       git-mv(1)
           Move or rename a file, a directory, or a symlink.

       git-notes(1)
           Add or inspect object notes.

       git-pull(1)
           Fetch from and integrate with another repository or a local branch.

       git-push(1)
           Update remote refs along with associated objects.

       git-range-diff(1)
           Compare two commit ranges (e.g. two versions of a branch).

       git-rebase(1)
           Reapply commits on top of another base tip.

       git-reset(1)
           Reset current HEAD to the specified state.

       git-restore(1)
           Restore working tree files.

       git-revert(1)
           Revert some existing commits.

       git-rm(1)
           Remove files from the working tree and from the index.

       git-shortlog(1)
           Summarize git log output.

       git-show(1)
           Show various types of objects.

       git-sparse-checkout(1)
           Initialize and modify the sparse-checkout.

       git-stash(1)
           Stash the changes in a dirty working directory away.

       git-status(1)
           Show the working tree status.

       git-submodule(1)
           Initialize, update or inspect submodules.

       git-switch(1)
           Switch branches.

       git-tag(1)
           Create, list, delete or verify a tag object signed with GPG.

       git-worktree(1)
           Manage multiple working trees.

       gitk(1)
           The Git repository browser.

   Ancillary Commands
       Manipulators:

       git-config(1)
           Get and set repository or global options.

       git-fast-export(1)
           Git data exporter.

       git-fast-import(1)
           Backend for fast Git data importers.

       git-filter-branch(1)
           Rewrite branches.

       git-mergetool(1)
           Run merge conflict resolution tools to resolve merge conflicts.

       git-pack-refs(1)
           Pack heads and tags for efficient repository access.

       git-prune(1)
           Prune all unreachable objects from the object database.

       git-reflog(1)
           Manage reflog information.

       git-remote(1)
           Manage set of tracked repositories.

       git-repack(1)
           Pack unpacked objects in a repository.

       git-replace(1)
           Create, list, delete refs to replace objects.

       Interrogators:

       git-annotate(1)
           Annotate file lines with commit information.

       git-blame(1)
           Show what revision and author last modified each line of a file.

       git-count-objects(1)
           Count unpacked number of objects and their disk consumption.

       git-difftool(1)
           Show changes using common diff tools.

       git-fsck(1)
           Verifies the connectivity and validity of the objects in the database.

       git-help(1)
           Display help information about Git.

       git-instaweb(1)
           Instantly browse your working repository in gitweb.

       git-merge-tree(1)
           Show three-way merge without touching index.

       git-rerere(1)
           Reuse recorded resolution of conflicted merges.

       git-show-branch(1)
           Show branches and their commits.

       git-verify-commit(1)
           Check the GPG signature of commits.

       git-verify-tag(1)
           Check the GPG signature of tags.

       git-whatchanged(1)
           Show logs with difference each commit introduces.

       gitweb(1)
           Git web interface (web frontend to Git repositories).

   Interacting with Others
       These commands are to interact with foreign SCM and with other people via patch over e-mail.

       git-archimport(1)
           Import a GNU Arch repository into Git.

       git-cvsexportcommit(1)
           Export a single commit to a CVS checkout.

       git-cvsimport(1)
           Salvage your data out of another SCM people love to hate.

       git-cvsserver(1)
           A CVS server emulator for Git.

       git-imap-send(1)
           Send a collection of patches from stdin to an IMAP folder.

       git-p4(1)
           Import from and submit to Perforce repositories.

       git-quiltimport(1)
           Applies a quilt patchset onto the current branch.

       git-request-pull(1)
           Generates a summary of pending changes.

       git-send-email(1)
           Send a collection of patches as emails.

       git-svn(1)
           Bidirectional operation between a Subversion repository and Git.

   Reset, restore and revert
       There are three commands with similar names: git reset, git restore and git revert.

       â¢   git-revert(1) is about making a new commit that reverts the changes made by other commits.

       â¢   git-restore(1) is about restoring files in the working tree from either the index or another commit. This command does not update your branch. The command can also be used to restore files in the index
           from another commit.

       â¢   git-reset(1) is about updating your branch, moving the tip in order to add or remove commits from the branch. This operation changes the commit history.

           git reset can also be used to restore the index, overlapping with git restore.

LOW-LEVEL COMMANDS (PLUMBING)
       Although Git includes its own porcelain layer, its low-level commands are sufficient to support development of alternative porcelains. Developers of such porcelains might start by reading about git-update-
       index(1) and git-read-tree(1).

       The interface (input, output, set of options and the semantics) to these low-level commands are meant to be a lot more stable than Porcelain level commands, because these commands are primarily for scripted
       use. The interface to Porcelain commands on the other hand are subject to change in order to improve the end user experience.

       The following description divides the low-level commands into commands that manipulate objects (in the repository, index, and working tree), commands that interrogate and compare objects, and commands that
       move objects and references between repositories.

   Manipulation commands
       git-apply(1)
           Apply a patch to files and/or to the index.

       git-checkout-index(1)
           Copy files from the index to the working tree.

       git-commit-graph(1)
           Write and verify Git commit-graph files.

       git-commit-tree(1)
           Create a new commit object.

       git-hash-object(1)
           Compute object ID and optionally creates a blob from a file.

       git-index-pack(1)
           Build pack index file for an existing packed archive.

       git-merge-file(1)
           Run a three-way file merge.

       git-merge-index(1)
           Run a merge for files needing merging.

       git-mktag(1)
           Creates a tag object.

       git-mktree(1)
           Build a tree-object from ls-tree formatted text.

       git-multi-pack-index(1)
           Write and verify multi-pack-indexes.

       git-pack-objects(1)
           Create a packed archive of objects.

       git-prune-packed(1)
           Remove extra objects that are already in pack files.

       git-read-tree(1)
           Reads tree information into the index.

       git-symbolic-ref(1)
           Read, modify and delete symbolic refs.

       git-unpack-objects(1)
           Unpack objects from a packed archive.

       git-update-index(1)
           Register file contents in the working tree to the index.

       git-update-ref(1)
           Update the object name stored in a ref safely.

       git-write-tree(1)
           Create a tree object from the current index.

   Interrogation commands
       git-cat-file(1)
           Provide content or type and size information for repository objects.

       git-cherry(1)
           Find commits yet to be applied to upstream.

       git-diff-files(1)
           Compares files in the working tree and the index.

       git-diff-index(1)
           Compare a tree to the working tree or index.

       git-diff-tree(1)
           Compares the content and mode of blobs found via two tree objects.

       git-for-each-ref(1)
           Output information on each ref.

       git-get-tar-commit-id(1)
           Extract commit ID from an archive created using git-archive.

       git-ls-files(1)
           Show information about files in the index and the working tree.

       git-ls-remote(1)
           List references in a remote repository.

       git-ls-tree(1)
           List the contents of a tree object.

       git-merge-base(1)
           Find as good common ancestors as possible for a merge.

       git-name-rev(1)
           Find symbolic names for given revs.

       git-pack-redundant(1)
           Find redundant pack files.

       git-rev-list(1)
           Lists commit objects in reverse chronological order.

       git-rev-parse(1)
           Pick out and massage parameters.

       git-show-index(1)
           Show packed archive index.

       git-show-ref(1)
           List references in a local repository.

       git-unpack-file(1)
           Creates a temporary file with a blobâs contents.

       git-var(1)
           Show a Git logical variable.

       git-verify-pack(1)
           Validate packed Git archive files.

       In general, the interrogate commands do not touch the files in the working tree.

   Syncing repositories
       git-daemon(1)
           A really simple server for Git repositories.

       git-fetch-pack(1)
           Receive missing objects from another repository.

       git-http-backend(1)
           Server side implementation of Git over HTTP.

       git-send-pack(1)
           Push objects over Git protocol to another repository.

       git-update-server-info(1)
           Update auxiliary info file to help dumb servers.

       The following are helper commands used by the above; end users typically do not use them directly.

       git-http-fetch(1)
           Download from a remote Git repository via HTTP.

       git-http-push(1)
           Push objects over HTTP/DAV to another repository.

       git-parse-remote(1)
           Routines to help parsing remote repository access parameters.

       git-receive-pack(1)
           Receive what is pushed into the repository.

       git-shell(1)
           Restricted login shell for Git-only SSH access.

       git-upload-archive(1)
           Send archive back to git-archive.

       git-upload-pack(1)
           Send objects packed back to git-fetch-pack.

   Internal helper commands
       These are internal helper commands used by other commands; end users typically do not use them directly.

       git-check-attr(1)
           Display gitattributes information.

       git-check-ignore(1)
           Debug gitignore / exclude files.

       git-check-mailmap(1)
           Show canonical names and email addresses of contacts.

       git-check-ref-format(1)
           Ensures that a reference name is well formed.

       git-column(1)
           Display data in columns.

       git-credential(1)
           Retrieve and store user credentials.

       git-credential-cache(1)
           Helper to temporarily store passwords in memory.

       git-credential-store(1)
           Helper to store credentials on disk.

       git-fmt-merge-msg(1)
           Produce a merge commit message.

       git-interpret-trailers(1)
           Add or parse structured information in commit messages.

       git-mailinfo(1)
           Extracts patch and authorship from a single e-mail message.

       git-mailsplit(1)
           Simple UNIX mbox splitter program.

       git-merge-one-file(1)
           The standard helper program to use with git-merge-index.

       git-patch-id(1)
           Compute unique ID for a patch.

       git-sh-i18n(1)
           Gitâs i18n setup code for shell scripts.

       git-sh-setup(1)
           Common Git shell script setup code.

       git-stripspace(1)
           Remove unnecessary whitespace.

CONFIGURATION MECHANISM
       Git uses a simple text format to store customizations that are per repository and are per user. Such a configuration file may look like this:

           #
           # A '#' or ';' character indicates a comment.
           #

           ; core variables
           [core]
                   ; Don't trust file modes
                   filemode = false

           ; user identity
           [user]
                   name = "Junio C Hamano"
                   email = "gitster@pobox.com"

       Various commands read from the configuration file and adjust their operation accordingly. See git-config(1) for a list and more details about the configuration mechanism.

IDENTIFIER TERMINOLOGY
       <object>
           Indicates the object name for any type of object.

       <blob>
           Indicates a blob object name.

       <tree>
           Indicates a tree object name.

       <commit>
           Indicates a commit object name.

       <tree-ish>
           Indicates a tree, commit or tag object name. A command that takes a <tree-ish> argument ultimately wants to operate on a <tree> object but automatically dereferences <commit> and <tag> objects that point
           at a <tree>.

       <commit-ish>
           Indicates a commit or tag object name. A command that takes a <commit-ish> argument ultimately wants to operate on a <commit> object but automatically dereferences <tag> objects that point at a <commit>.

       <type>
           Indicates that an object type is required. Currently one of: blob, tree, commit, or tag.

       <file>
           Indicates a filename - almost always relative to the root of the tree structure GIT_INDEX_FILE describes.

SYMBOLIC IDENTIFIERS
       Any Git command accepting any <object> can also use the following symbolic notation:

       HEAD
           indicates the head of the current branch.

       <tag>
           a valid tag name (i.e. a refs/tags/<tag> reference).

       <head>
           a valid head name (i.e. a refs/heads/<head> reference).

       For a more complete list of ways to spell object names, see "SPECIFYING REVISIONS" section in gitrevisions(7).

FILE/DIRECTORY STRUCTURE
       Please see the gitrepository-layout(5) document.

       Read githooks(5) for more details about each hook.

       Higher level SCMs may provide and manage additional information in the $GIT_DIR.

TERMINOLOGY
       Please see gitglossary(7).

ENVIRONMENT VARIABLES
       Various Git commands use the following environment variables:

   The Git Repository
       These environment variables apply to all core Git commands. Nb: it is worth noting that they may be used/overridden by SCMS sitting above Git so take care if using a foreign front-end.

       GIT_INDEX_FILE
           This environment allows the specification of an alternate index file. If not specified, the default of $GIT_DIR/index is used.

       GIT_INDEX_VERSION
           This environment variable allows the specification of an index version for new repositories. It wonât affect existing index files. By default index file version 2 or 3 is used. See git-update-index(1) for
           more information.

       GIT_OBJECT_DIRECTORY
           If the object storage directory is specified via this environment variable then the sha1 directories are created underneath - otherwise the default $GIT_DIR/objects directory is used.

       GIT_ALTERNATE_OBJECT_DIRECTORIES
           Due to the immutable nature of Git objects, old objects can be archived into shared, read-only directories. This variable specifies a ":" separated (on Windows ";" separated) list of Git object directories
           which can be used to search for Git objects. New objects will not be written to these directories.

           Entries that begin with " (double-quote) will be interpreted as C-style quoted paths, removing leading and trailing double-quotes and respecting backslash escapes. E.g., the value
           "path-with-\"-and-:-in-it":vanilla-path has two paths: path-with-"-and-:-in-it and vanilla-path.

       GIT_DIR
           If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the base of the repository. The --git-dir command-line option also sets this value.

       GIT_WORK_TREE
           Set the path to the root of the working tree. This can also be controlled by the --work-tree command-line option and the core.worktree configuration variable.

       GIT_NAMESPACE
           Set the Git namespace; see gitnamespaces(7) for details. The --namespace command-line option also sets this value.

       GIT_CEILING_DIRECTORIES
           This should be a colon-separated list of absolute paths. If set, it is a list of directories that Git should not chdir up into while looking for a repository directory (useful for excluding slow-loading
           network directories). It will not exclude the current working directory or a GIT_DIR set on the command line or in the environment. Normally, Git has to read the entries in this list and resolve any
           symlink that might be present in order to compare them with the current directory. However, if even this access is slow, you can add an empty entry to the list to tell Git that the subsequent entries are
           not symlinks and neednât be resolved; e.g., GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink.

       GIT_DISCOVERY_ACROSS_FILESYSTEM
           When run in a directory that does not have ".git" repository directory, Git tries to find such a directory in the parent directories to find the top of the working tree, but by default it does not cross
           filesystem boundaries. This environment variable can be set to true to tell Git not to stop at filesystem boundaries. Like GIT_CEILING_DIRECTORIES, this will not affect an explicit repository directory set
           via GIT_DIR or on the command line.

       GIT_COMMON_DIR
           If this variable is set to a path, non-worktree files that are normally in $GIT_DIR will be taken from this path instead. Worktree-specific files such as HEAD or index are taken from $GIT_DIR. See
           gitrepository-layout(5) and git-worktree(1) for details. This variable has lower precedence than other path variables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY...

   Git Commits
       GIT_AUTHOR_NAME
           The human-readable name used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings.

       GIT_AUTHOR_EMAIL
           The email address used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings.

       GIT_AUTHOR_DATE
           The date used for the author identity when creating commit or tag objects, or when writing reflogs. See git-commit(1) for valid formats.

       GIT_COMMITTER_NAME
           The human-readable name used in the committer identity when creating commit or tag objects, or when writing reflogs. Overrides the user.name and committer.name configuration settings.

       GIT_COMMITTER_EMAIL
           The email address used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the user.email and committer.email configuration settings.

       GIT_COMMITTER_DATE
           The date used for the committer identity when creating commit or tag objects, or when writing reflogs. See git-commit(1) for valid formats.

       EMAIL
           The email address used in the author and committer identities if no other relevant environment variable or configuration setting has been set.

   Git Diffs
       GIT_DIFF_OPTS
           Only valid setting is "--unified=??" or "-u??" to set the number of context lines shown when a unified diff is created. This takes precedence over any "-U" or "--unified" option value passed on the Git
           diff command line.

       GIT_EXTERNAL_DIFF
           When the environment variable GIT_EXTERNAL_DIFF is set, the program named by it is called, instead of the diff invocation described above. For a path that is added, removed, or modified, GIT_EXTERNAL_DIFF
           is called with 7 parameters:

               path old-file old-hex old-mode new-file new-hex new-mode

           where:

       <old|new>-file
           are files GIT_EXTERNAL_DIFF can use to read the contents of <old|new>,

       <old|new>-hex
           are the 40-hexdigit SHA-1 hashes,

       <old|new>-mode
           are the octal representation of the file modes.

           The file parameters can point at the userâs working file (e.g.  new-file in "git-diff-files"), /dev/null (e.g.  old-file when a new file is added), or a temporary file (e.g.  old-file in the index).
           GIT_EXTERNAL_DIFF should not worry about unlinking the temporary file --- it is removed when GIT_EXTERNAL_DIFF exits.

           For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1 parameter, <path>.

           For each path GIT_EXTERNAL_DIFF is called, two environment variables, GIT_DIFF_PATH_COUNTER and GIT_DIFF_PATH_TOTAL are set.

       GIT_DIFF_PATH_COUNTER
           A 1-based counter incremented by one for every path.

       GIT_DIFF_PATH_TOTAL
           The total number of paths.

   other
       GIT_MERGE_VERBOSITY
           A number controlling the amount of output shown by the recursive merge strategy. Overrides merge.verbosity. See git-merge(1)

       GIT_PAGER
           This environment variable overrides $PAGER. If it is set to an empty string or to the value "cat", Git will not launch a pager. See also the core.pager option in git-config(1).

       GIT_PROGRESS_DELAY
           A number controlling how many seconds to delay before showing optional progress indicators. Defaults to 2.

       GIT_EDITOR
           This environment variable overrides $EDITOR and $VISUAL. It is used by several Git commands when, on interactive mode, an editor is to be launched. See also git-var(1) and the core.editor option in git-
           config(1).

       GIT_SSH, GIT_SSH_COMMAND
           If either of these environment variables is set then git fetch and git push will use the specified command instead of ssh when they need to connect to a remote system. The command-line parameters passed to
           the configured command are determined by the ssh variant. See ssh.variant option in git-config(1) for details.

           $GIT_SSH_COMMAND takes precedence over $GIT_SSH, and is interpreted by the shell, which allows additional arguments to be included.  $GIT_SSH on the other hand must be just the path to a program (which can
           be a wrapper shell script, if additional arguments are needed).

           Usually it is easier to configure any desired options through your personal .ssh/config file. Please consult your ssh documentation for further details.

       GIT_SSH_VARIANT
           If this environment variable is set, it overrides Gitâs autodetection whether GIT_SSH/GIT_SSH_COMMAND/core.sshCommand refer to OpenSSH, plink or tortoiseplink. This variable overrides the config setting
           ssh.variant that serves the same purpose.

       GIT_ASKPASS
           If this environment variable is set, then Git commands which need to acquire passwords or passphrases (e.g. for HTTP or IMAP authentication) will call this program with a suitable prompt as command-line
           argument and read the password from its STDOUT. See also the core.askPass option in git-config(1).

       GIT_TERMINAL_PROMPT
           If this environment variable is set to 0, git will not prompt on the terminal (e.g., when asking for HTTP authentication).

       GIT_CONFIG_NOSYSTEM
           Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file. This environment variable can be used along with $HOME and $XDG_CONFIG_HOME to create a predictable environment for a
           picky script, or you can set it temporarily to avoid using a buggy /etc/gitconfig file while waiting for someone with sufficient permissions to fix it.

       GIT_FLUSH
           If this environment variable is set to "1", then commands such as git blame (in incremental mode), git rev-list, git log, git check-attr and git check-ignore will force a flush of the output stream after
           each record have been flushed. If this variable is set to "0", the output of these commands will be done using completely buffered I/O. If this environment variable is not set, Git will choose buffered or
           record-oriented flushing based on whether stdout appears to be redirected to a file or not.

       GIT_TRACE
           Enables general trace messages, e.g. alias expansion, built-in command execution and external command execution.

           If this variable is set to "1", "2" or "true" (comparison is case insensitive), trace messages will be printed to stderr.

           If the variable is set to an integer value greater than 2 and lower than 10 (strictly) then Git will interpret this value as an open file descriptor and will try to write the trace messages into this file
           descriptor.

           Alternatively, if the variable is set to an absolute path (starting with a / character), Git will interpret this as a file path and will try to append the trace messages to it.

           Unsetting the variable, or setting it to empty, "0" or "false" (case insensitive) disables trace messages.

       GIT_TRACE_FSMONITOR
           Enables trace messages for the filesystem monitor extension. See GIT_TRACE for available trace output options.

       GIT_TRACE_PACK_ACCESS
           Enables trace messages for all accesses to any packs. For each access, the pack file name and an offset in the pack is recorded. This may be helpful for troubleshooting some pack-related performance
           problems. See GIT_TRACE for available trace output options.

       GIT_TRACE_PACKET
           Enables trace messages for all packets coming in or out of a given program. This can help with debugging object negotiation or other protocol issues. Tracing is turned off at a packet starting with "PACK"
           (but see GIT_TRACE_PACKFILE below). See GIT_TRACE for available trace output options.

       GIT_TRACE_PACKFILE
           Enables tracing of packfiles sent or received by a given program. Unlike other trace output, this trace is verbatim: no headers, and no quoting of binary data. You almost certainly want to direct into a
           file (e.g., GIT_TRACE_PACKFILE=/tmp/my.pack) rather than displaying it on the terminal or mixing it with other trace output.

           Note that this is currently only implemented for the client side of clones and fetches.

       GIT_TRACE_PERFORMANCE
           Enables performance related trace messages, e.g. total execution time of each Git command. See GIT_TRACE for available trace output options.

       GIT_TRACE_SETUP
           Enables trace messages printing the .git, working tree and current working directory after Git has completed its setup phase. See GIT_TRACE for available trace output options.

       GIT_TRACE_SHALLOW
           Enables trace messages that can help debugging fetching / cloning of shallow repositories. See GIT_TRACE for available trace output options.

       GIT_TRACE_CURL
           Enables a curl full trace dump of all incoming and outgoing data, including descriptive information, of the git transport protocol. This is similar to doing curl --trace-ascii on the command line. This
           option overrides setting the GIT_CURL_VERBOSE environment variable. See GIT_TRACE for available trace output options.

       GIT_TRACE_CURL_NO_DATA
           When a curl trace is enabled (see GIT_TRACE_CURL above), do not dump data (that is, only dump info lines and headers).

       GIT_TRACE2
           Enables more detailed trace messages from the "trace2" library. Output from GIT_TRACE2 is a simple text-based format for human readability.

           If this variable is set to "1", "2" or "true" (comparison is case insensitive), trace messages will be printed to stderr.

           If the variable is set to an integer value greater than 2 and lower than 10 (strictly) then Git will interpret this value as an open file descriptor and will try to write the trace messages into this file
           descriptor.

           Alternatively, if the variable is set to an absolute path (starting with a / character), Git will interpret this as a file path and will try to append the trace messages to it. If the path already exists
           and is a directory, the trace messages will be written to files (one per process) in that directory, named according to the last component of the SID and an optional counter (to avoid filename collisions).

           In addition, if the variable is set to af_unix:[<socket_type>:]<absolute-pathname>, Git will try to open the path as a Unix Domain Socket. The socket type can be either stream or dgram.

           Unsetting the variable, or setting it to empty, "0" or "false" (case insensitive) disables trace messages.

           See Trace2 documentation[2] for full details.

       GIT_TRACE2_EVENT
           This setting writes a JSON-based format that is suited for machine interpretation. See GIT_TRACE2 for available trace output options and Trace2 documentation[2] for full details.

       GIT_TRACE2_PERF
           In addition to the text-based messages available in GIT_TRACE2, this setting writes a column-based format for understanding nesting regions. See GIT_TRACE2 for available trace output options and Trace2
           documentation[2] for full details.

       GIT_REDACT_COOKIES
           This can be set to a comma-separated list of strings. When a curl trace is enabled (see GIT_TRACE_CURL above), whenever a "Cookies:" header sent by the client is dumped, values of cookies whose key is in
           that list (case-sensitive) are redacted.

       GIT_LITERAL_PATHSPECS
           Setting this variable to 1 will cause Git to treat all pathspecs literally, rather than as glob patterns. For example, running GIT_LITERAL_PATHSPECS=1 git log -- '*.c' will search for commits that touch
           the path *.c, not any paths that the glob *.c matches. You might want this if you are feeding literal paths to Git (e.g., paths previously given to you by git ls-tree, --raw diff output, etc).

       GIT_GLOB_PATHSPECS
           Setting this variable to 1 will cause Git to treat all pathspecs as glob patterns (aka "glob" magic).

       GIT_NOGLOB_PATHSPECS
           Setting this variable to 1 will cause Git to treat all pathspecs as literal (aka "literal" magic).

       GIT_ICASE_PATHSPECS
           Setting this variable to 1 will cause Git to treat all pathspecs as case-insensitive.

       GIT_REFLOG_ACTION
           When a ref is updated, reflog entries are created to keep track of the reason why the ref was updated (which is typically the name of the high-level command that updated the ref), in addition to the old
           and new values of the ref. A scripted Porcelain command can use set_reflog_action helper function in git-sh-setup to set its name to this variable when it is invoked as the top level command by the end
           user, to be recorded in the body of the reflog.

       GIT_REF_PARANOIA
           If set to 1, include broken or badly named refs when iterating over lists of refs. In a normal, non-corrupted repository, this does nothing. However, enabling it may help git to detect and abort some
           operations in the presence of broken refs. Git sets this variable automatically when performing destructive operations like git-prune(1). You should not need to set it yourself unless you want to be
           paranoid about making sure an operation has touched every ref (e.g., because you are cloning a repository to make a backup).

       GIT_ALLOW_PROTOCOL
           If set to a colon-separated list of protocols, behave as if protocol.allow is set to never, and each of the listed protocols has protocol.<name>.allow set to always (overriding any existing configuration).
           In other words, any protocol not mentioned will be disallowed (i.e., this is a whitelist, not a blacklist). See the description of protocol.allow in git-config(1) for more details.

       GIT_PROTOCOL_FROM_USER
           Set to 0 to prevent protocols used by fetch/push/clone which are configured to the user state. This is useful to restrict recursive submodule initialization from an untrusted repository or for programs
           which feed potentially-untrusted URLS to git commands. See git-config(1) for more details.

       GIT_PROTOCOL
           For internal use only. Used in handshaking the wire protocol. Contains a colon : separated list of keys with optional values key[=value]. Presence of unknown keys and values must be ignored.

       GIT_OPTIONAL_LOCKS
           If set to 0, Git will complete any requested operation without performing any optional sub-operations that require taking a lock. For example, this will prevent git status from refreshing the index as a
           side effect. This is useful for processes running in the background which do not want to cause lock contention with other operations on the repository. Defaults to 1.

       GIT_REDIRECT_STDIN, GIT_REDIRECT_STDOUT, GIT_REDIRECT_STDERR
           Windows-only: allow redirecting the standard input/output/error handles to paths specified by the environment variables. This is particularly useful in multi-threaded applications where the canonical way
           to pass standard handles via CreateProcess() is not an option because it would require the handles to be marked inheritable (and consequently every spawned process would inherit them, possibly blocking
           regular Git operations). The primary intended use case is to use named pipes for communication (e.g.  \\.\pipe\my-git-stdin-123).

           Two special values are supported: off will simply close the corresponding standard handle, and if GIT_REDIRECT_STDERR is 2>&1, standard error will be redirected to the same handle as standard output.

       GIT_PRINT_SHA1_ELLIPSIS (deprecated)
           If set to yes, print an ellipsis following an (abbreviated) SHA-1 value. This affects indications of detached HEADs (git-checkout(1)) and the raw diff output (git-diff(1)). Printing an ellipsis in the
           cases mentioned is no longer considered adequate and support for it is likely to be removed in the foreseeable future (along with the variable).

DISCUSSION
       More detail on the following is available from the Git concepts chapter of the user-manual[3] and gitcore-tutorial(7).

       A Git project normally consists of a working directory with a ".git" subdirectory at the top level. The .git directory contains, among other things, a compressed object database representing the complete
       history of the project, an "index" file which links that history to the current contents of the working tree, and named pointers into that history such as tags and branch heads.

       The object database contains objects of three main types: blobs, which hold file data; trees, which point to blobs and other trees to build up directory hierarchies; and commits, which each reference a single
       tree and some number of parent commits.

       The commit, equivalent to what other systems call a "changeset" or "version", represents a step in the projectâs history, and each parent represents an immediately preceding step. Commits with more than one
       parent represent merges of independent lines of development.

       All objects are named by the SHA-1 hash of their contents, normally written as a string of 40 hex digits. Such names are globally unique. The entire history leading up to a commit can be vouched for by signing
       just that commit. A fourth object type, the tag, is provided for this purpose.

       When first created, objects are stored in individual files, but for efficiency may later be compressed together into "pack files".

       Named pointers called refs mark interesting points in history. A ref may contain the SHA-1 name of an object or the name of another ref. Refs with names beginning ref/head/ contain the SHA-1 name of the most
       recent commit (or "head") of a branch under development. SHA-1 names of tags of interest are stored under ref/tags/. A special ref named HEAD contains the name of the currently checked-out branch.

       The index file is initialized with a list of all paths and, for each path, a blob object and a set of attributes. The blob object represents the contents of the file as of the head of the current branch. The
       attributes (last modified time, size, etc.) are taken from the corresponding file in the working tree. Subsequent changes to the working tree can be found by comparing these attributes. The index may be
       updated with new content, and new commits may be created from the content stored in the index.

       The index is also capable of storing multiple entries (called "stages") for a given pathname. These stages are used to hold the various unmerged version of a file when a merge is in progress.

FURTHER DOCUMENTATION
       See the references in the "description" section to get started using Git. The following is probably more detail than necessary for a first-time user.

       The Git concepts chapter of the user-manual[3] and gitcore-tutorial(7) both provide introductions to the underlying Git architecture.

       See gitworkflows(7) for an overview of recommended workflows.

       See also the howto[4] documents for some useful examples.

       The internals are documented in the Git API documentation[5].

       Users migrating from CVS may also want to read gitcvs-migration(7).

AUTHORS
       Git was started by Linus Torvalds, and is currently maintained by Junio C Hamano. Numerous contributions have come from the Git mailing list <git@vger.kernel.org[6]>.
       http://www.openhub.net/p/git/contributors/summary gives you a more complete list of contributors.

       If you have a clone of git.git itself, the output of git-shortlog(1) and git-blame(1) can show you the authors for specific parts of the project.

REPORTING BUGS
       Report bugs to the Git mailing list <git@vger.kernel.org[6]> where the development and maintenance is primarily done. You do not have to be subscribed to the list to send a message there. See the list archive
       at https://lore.kernel.org/git for previous bug reports and other discussions.

       Issues which are security relevant should be disclosed privately to the Git Security mailing list <git-security@googlegroups.com[7]>.

SEE ALSO
       gittutorial(7), gittutorial-2(7), giteveryday(7), gitcvs-migration(7), gitglossary(7), gitcore-tutorial(7), gitcli(7), The Git Userâs Manual[1], gitworkflows(7)

GIT
       Part of the git(1) suite

NOTES
        1. Git Userâs Manual
           file:///usr/share/doc/git/html/user-manual.html

        2. Trace2 documentation
           file:///usr/share/doc/git/html/technical/api-trace2.html

        3. Git concepts chapter of the user-manual
           file:///usr/share/doc/git/html/user-manual.html#git-concepts

        4. howto
           file:///usr/share/doc/git/html/howto-index.html

        5. Git API documentation
           file:///usr/share/doc/git/html/technical/api-index.html

        6. git@vger.kernel.org
           mailto:git@vger.kernel.org

        7. git-security@googlegroups.com
           mailto:git-security@googlegroups.com

Git 2.25.1                                                                                             04/25/2022                                                                                                 GIT(1)
